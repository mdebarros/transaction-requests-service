{
  "swagger": "2.0",
  "info": {
    "description": "Based on API Definition.docx updated on 2018-03-13 Version 1.0. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.",
    "license": {
      "name": "Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)"
    },
    "title": "Transaction Requests related parts of Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)",
    "version": "1.0-oas3"
  },
  "basePath": "/",
  "paths": {
    "/authorizations/{ID}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)",
            "in": "header",
            "name": "content-length",
            "required": false,
            "type": "number"
          },
          {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "in": "header",
            "name": "content-type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Date header field indicates the date when the request was sent.",
            "in": "header",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.",
            "in": "header",
            "name": "x-forwarded-for",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature).",
            "in": "header",
            "name": "fspiop-source",
            "required": true,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.",
            "in": "header",
            "name": "fspiop-destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.",
            "in": "header",
            "name": "fspiop-encryption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.",
            "in": "header",
            "name": "fspiop-signature",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-uri",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-http-method",
            "required": false,
            "type": "string"
          },
          {
            "description": "The Accept header field indicates the version of the API the client would like the server to use.",
            "in": "header",
            "name": "accept",
            "required": true,
            "type": "string"
          },
          {
            "description": "a valid enumeration for the authentication type: OTP, QRCODE",
            "enum": [
              "OTP",
              "QRCODE"
            ],
            "in": "query",
            "name": "authenticationType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The number of retries left before the financial transaction is rejected",
            "in": "query",
            "name": "retriesLeft",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The transaction amount that will be withdrawn from the Payer’s account",
            "in": "query",
            "name": "amount",
            "required": true,
            "type": "string"
          },
          {
            "description": "The transaction currency for the amount that will be withdrawn from the Payer’s account",
            "in": "query",
            "name": "currency",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "authorizations",
          "sampled"
        ],
        "description": "The HTTP request GET /authorizations/<ID> is used to request authorization for a specified transaction request. The <ID> in the URI should contain the transactionRequestId for which authorization is being requested.",
        "operationId": "AuthorizationsIDResponse",
        "summary": "/authorizations/<ID>"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)",
            "in": "header",
            "name": "content-length",
            "required": false,
            "type": "number"
          },
          {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "in": "header",
            "name": "content-type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Date header field indicates the date when the request was sent.",
            "in": "header",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.",
            "in": "header",
            "name": "x-forwarded-for",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature).",
            "in": "header",
            "name": "fspiop-source",
            "required": true,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.",
            "in": "header",
            "name": "fspiop-destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.",
            "in": "header",
            "name": "fspiop-encryption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.",
            "in": "header",
            "name": "fspiop-signature",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-uri",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-http-method",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthorizationsIDPutResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "authorizations",
          "sampled"
        ],
        "description": "The callback PUT /authorizations/<ID> is used to inform the client of an authorization result for a transactionRequest. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>.",
        "operationId": "AuthorizationsIDPutResponse",
        "summary": "/authorizations/<ID>"
      }
    },
    "/authorizations/{ID}/error": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)",
            "in": "header",
            "name": "content-length",
            "required": false,
            "type": "number"
          },
          {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "in": "header",
            "name": "content-type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Date header field indicates the date when the request was sent.",
            "in": "header",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.",
            "in": "header",
            "name": "x-forwarded-for",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature).",
            "in": "header",
            "name": "fspiop-source",
            "required": true,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.",
            "in": "header",
            "name": "fspiop-destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.",
            "in": "header",
            "name": "fspiop-encryption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.",
            "in": "header",
            "name": "fspiop-signature",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-uri",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-http-method",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "authorizations",
          "sampled"
        ],
        "description": "If the server is unable to process the authorization message, the error callback PUT /authorizations/<ID>/error is used. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>.",
        "operationId": "AuthorizationsErrorByID",
        "summary": "/authorizations/<ID>/error",
        "x-examples": {
          "application/json": {
            "“errorInformation”": {
              "extensionList": {
                "extension": [
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  },
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  }
                ]
              },
              "“errorCode”": "“5100”",
              "“errorDescription”": "“This is an error description”"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "health"
        ],
        "description": "The HTTP request GET /health is used to return the current status of the API.",
        "operationId": "HealthGet",
        "summary": "Get Server"
      }
    },
    "/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "metrics"
        ],
        "description": "The HTTP request GET /health is used to return the current status of the API.",
        "operationId": "MetricsGet",
        "summary": "Get Server"
      }
    },
    "/transactionRequests": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Accept header field indicates the version of the API the client would like the server to use.",
            "in": "header",
            "name": "accept",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)",
            "in": "header",
            "name": "content-length",
            "required": false,
            "type": "number"
          },
          {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "in": "header",
            "name": "content-type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Date header field indicates the date when the request was sent.",
            "in": "header",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.",
            "in": "header",
            "name": "x-forwarded-for",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature).",
            "in": "header",
            "name": "fspiop-source",
            "required": true,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.",
            "in": "header",
            "name": "fspiop-destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.",
            "in": "header",
            "name": "fspiop-encryption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.",
            "in": "header",
            "name": "fspiop-signature",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-uri",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-http-method",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRequestsPostRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "transactionRequests",
          "sampled"
        ],
        "description": "The HTTP request POST /transactionRequests is used to request the creation of a transaction request for the provided financial transaction in the server.",
        "operationId": "TransactionRequests",
        "summary": "TransactionRequests",
        "x-examples": {
          "application/json": {
            "extensionList": {
              "extension": [
                {
                  "“key”": "“errorDescription”",
                  "“value”": "“This is a more detailed error description”"
                },
                {
                  "“key”": "“errorDescription”",
                  "“value”": "“This is a more detailed error description”"
                }
              ]
            },
            "“amount”": {
              "“amount”": "“123.45”",
              "“currency”": "“USD”"
            },
            "“authenticationType”": "“OTP”",
            "“expiration”": "“2016-05-24T08:38:08.699-04:00”",
            "“geoCode”": {
              "“latitude”": "“+45.4215”",
              "“longitude”": "“+75.6972”"
            },
            "“note”": "“Free-text memo”",
            "“payee”": {
              "merchantClassificationCode": "4321",
              "partyIdInfo": {
                "“fspId”": "“1234”",
                "“partyIdType”": "“PERSONAL_ID”",
                "“partyIdentifier”": "“16135551212”",
                "“partySubIdOrType”": "“DRIVING_LICENSE”"
              },
              "“name”": "“Justin Trudeau”",
              "“personalInfo”": {
                "“complexName”": {
                  "“firstName”": "“Justin”",
                  "“lastName”": "“Trudeau”",
                  "“middleName”": "“Pierre”"
                },
                "“dateOfBirth”": "“1971-12-25”"
              }
            },
            "“payer”": {
              "“fspId”": "“1234”",
              "“partyIdType”": "“PERSONAL_ID”",
              "“partyIdentifier”": "“16135551212”",
              "“partySubIdOrType”": "“DRIVING_LICENSE”"
            },
            "“transactionRequestId”": "“b51ec534-ee48-4575-b6a9-ead2955b8069”",
            "“transactionType”": {
              "“balanceOfPayments”": "“123”",
              "“initiatorType”": "“CONSUMER”",
              "“initiator”": "“PAYEE”",
              "“refundInfo”": {
                "“originalTransactionId”": "“b51ec534-ee48-4575-b6a9-ead2955b8069”",
                "“refundReason”": "“free text indicating reason for the refund”"
              },
              "“scenario”": "“DEPOSIT”",
              "“subScenario”": "“locally defined sub-scenario”"
            }
          }
        }
      }
    },
    "/transactionRequests/{ID}": {
      "parameters": [
        {
          "in": "path",
          "name": "ID",
          "required": true,
          "type": "string"
        },
        {
          "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
          "in": "header",
          "name": "content-type",
          "required": true,
          "type": "string"
        },
        {
          "description": "The Date header field indicates the date when the request was sent.",
          "in": "header",
          "name": "date",
          "required": true,
          "type": "string"
        },
        {
          "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.",
          "in": "header",
          "name": "x-forwarded-for",
          "required": false,
          "type": "string"
        },
        {
          "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature).",
          "in": "header",
          "name": "fspiop-source",
          "required": true,
          "type": "string"
        },
        {
          "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.",
          "in": "header",
          "name": "fspiop-destination",
          "required": false,
          "type": "string"
        },
        {
          "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.",
          "in": "header",
          "name": "fspiop-encryption",
          "required": false,
          "type": "string"
        },
        {
          "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.",
          "in": "header",
          "name": "fspiop-signature",
          "required": false,
          "type": "string"
        },
        {
          "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document.",
          "in": "header",
          "name": "fspiop-uri",
          "required": false,
          "type": "string"
        },
        {
          "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document.",
          "in": "header",
          "name": "fspiop-http-method",
          "required": false,
          "type": "string"
        }
      ],
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Accept header field indicates the version of the API the client would like the server to use.",
            "in": "header",
            "name": "accept",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "transactionRequests",
          "sampled"
        ],
        "description": "The HTTP request GET /transactionRequests/<ID> is used to get information regarding an earlier created or requested transaction request. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request.",
        "operationId": "TransactionRequestsByID",
        "summary": "TransactionRequestsByID"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)",
            "in": "header",
            "name": "content-length",
            "required": false,
            "type": "number"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRequestsIDPutResponse"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "transactionRequests",
          "sampled"
        ],
        "description": "The callback PUT /transactionRequests/<ID> is used to inform the client of a requested or created transaction request. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>.",
        "operationId": "TransactionRequestsByIDPut",
        "summary": "TransactionRequestsByID",
        "x-examples": {
          "application/json": {
            "extensionList": {
              "extension": [
                {
                  "“key”": "“errorDescription”",
                  "“value”": "“This is a more detailed error description”"
                },
                {
                  "“key”": "“errorDescription”",
                  "“value”": "“This is a more detailed error description”"
                }
              ]
            },
            "“transactionId”": "“b51ec534-ee48-4575-b6a9-ead2955b8069”",
            "“transactionRequestState”": "“RECEIVED”"
          }
        }
      }
    },
    "/transactionRequests/{ID}/error": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ID",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)",
            "in": "header",
            "name": "content-length",
            "required": false,
            "type": "number"
          },
          {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "in": "header",
            "name": "content-type",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Date header field indicates the date when the request was sent.",
            "in": "header",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.",
            "in": "header",
            "name": "x-forwarded-for",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature).",
            "in": "header",
            "name": "fspiop-source",
            "required": true,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.",
            "in": "header",
            "name": "fspiop-destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.",
            "in": "header",
            "name": "fspiop-encryption",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.",
            "in": "header",
            "name": "fspiop-signature",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-uri",
            "required": false,
            "type": "string"
          },
          {
            "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document.",
            "in": "header",
            "name": "fspiop-http-method",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "401": {
            "description": "Unauthorized - The request requires authentication in order to be processed.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "403": {
            "description": "Forbidden - The request was denied and will be denied in the future.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "404": {
            "description": "Not Found - The resource specified in the URI was not found.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "405": {
            "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "406": {
            "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "501": {
            "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          },
          "503": {
            "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
            "headers": {
              "Content-Length": {
                "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "tags": [
          "transactionRequests",
          "sampled"
        ],
        "description": "If the server is unable to find or create a transaction request, or another processing error occurs, the error callback PUT /transactionRequests/<ID>/error is used. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>.",
        "operationId": "TransactionRequestsErrorByID",
        "summary": "TransactionRequestsErrorByID",
        "x-examples": {
          "application/json": {
            "“errorInformation”": {
              "extensionList": {
                "extension": [
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  },
                  {
                    "“key”": "“errorDescription”",
                    "“value”": "“This is a more detailed error description”"
                  }
                ]
              },
              "“errorCode”": "“5100”",
              "“errorDescription”": "“This is an error description”"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Amount": {
      "description": "The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.",
      "pattern": "^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$",
      "title": "Amount",
      "type": "string"
    },
    "AmountType": {
      "description": "Below are the allowed values for the enumeration AmountType - SEND Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. - RECEIVE Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive fees.",
      "enum": [
        "SEND",
        "RECEIVE"
      ],
      "title": "AmountType",
      "type": "string"
    },
    "AuthenticationInfo": {
      "description": "Data model for the complex type AuthenticationInfo",
      "properties": {
        "authentication": {
          "type": "string"
        },
        "authenticationValue": {
          "type": "string"
        }
      },
      "required": [
        "authentication",
        "authenticationValue"
      ],
      "title": "AuthenticationInfo",
      "type": "object"
    },
    "AuthenticationType": {
      "description": "Below are the allowed values for the enumeration AuthenticationType. - OTP One-time password generated by the Payer FSP. - QRCODE QR code used as One Time Password.",
      "enum": [
        "OTP",
        "QRCODE"
      ],
      "title": "AuthenticationTypeEnum",
      "type": "string"
    },
    "AuthenticationValue": {
      "description": "Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type.",
      "pattern": "^\\d{3,10}$|^\\S{1,64}$",
      "title": "AuthenticationValue",
      "type": "string"
    },
    "AuthorizationResponse": {
      "description": "Below are the allowed values for the enumeration - ENTERED Consumer entered the authentication value. - REJECTED Consumer rejected the transaction. - RESEND Consumer requested to resend the authentication value.",
      "enum": [
        "ENTERED",
        "REJECTED",
        "RESEND"
      ],
      "title": "AuthorizationResponse",
      "type": "string"
    },
    "AuthorizationsIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /authorizations/{ID} object",
      "properties": {
        "authenticationInfo": {
          "$ref": "#/definitions/AuthenticationInfo"
        },
        "responseType": {
          "description": "Enum containing response information; if the customer entered the authentication value, rejected the transaction, or requested a resend of the authentication value.",
          "type": "string"
        }
      },
      "required": [
        "responseType"
      ],
      "title": "AuthorizationsIDPutResponse",
      "type": "object"
    },
    "BalanceOfPayments": {
      "description": "(BopCode) The API data type BopCode is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. https://www.imf.org/external/np/sta/bopcode/",
      "pattern": "^[1-9]\\d{2}$",
      "title": "BalanceOfPayments",
      "type": "string"
    },
    "BinaryString": {
      "description": "The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters.",
      "pattern": "^[A-Za-z0-9-_]+[=]{0,2}$",
      "type": "string"
    },
    "BinaryString32": {
      "description": "The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed.",
      "pattern": "^[A-Za-z0-9-_]{43}$",
      "type": "string"
    },
    "BulkQuotesIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /bulkQuotes/{ID} object",
      "properties": {
        "expiration": {
          "description": "Date and time until when the quotation is valid and can be honored when used in the subsequent transaction request.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "individualQuoteResults": {
          "description": "Fees for each individual transaction, if any of them are charged per transaction.",
          "items": {
            "$ref": "#/definitions/IndividualQuoteResult"
          },
          "maxItems": 1000,
          "type": "array"
        }
      },
      "required": [
        "expiration"
      ],
      "title": "BulkQuotesIDPutResponse",
      "type": "object"
    },
    "BulkQuotesPostRequest": {
      "additionalProperties": false,
      "description": "POST /bulkQuotes object",
      "properties": {
        "bulkQuoteId": {
          "description": "Common ID between the FSPs for the bulk quote object, decided by the Payer FSP. The ID should be reused for resends of the same bulk quote. A new ID should be generated for each new bulk quote.",
          "type": "string"
        },
        "expiration": {
          "description": "Expiration is optional to let the Payee FSP know when a quote no longer needs to be returned.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode"
        },
        "individualQuotes": {
          "description": "List of quotes elements.",
          "items": {
            "$ref": "#/definitions/IndividualQuote"
          },
          "maxItems": 1000,
          "minItems": 1,
          "type": "array"
        },
        "payer": {
          "$ref": "#/definitions/Party"
        }
      },
      "required": [
        "bulkQuoteId",
        "payer",
        "individualQuotes"
      ],
      "title": "BulkQuotesPostRequest",
      "type": "object"
    },
    "BulkTransferState": {
      "description": "Below are the allowed values for the enumeration - RECEIVED Payee FSP has received the bulk transfer from the Payer FSP. - PENDING Payee FSP has validated the bulk transfer. - ACCEPTED Payee FSP has accepted to process the bulk transfer. - PROCESSING Payee FSP has started to transfer fund to the Payees. - COMPLETED Payee FSP has completed transfer of funds to the Payees. - REJECTED Payee FSP has rejected to process the bulk transfer.",
      "enum": [
        "RECEIVED",
        "PENDING",
        "ACCEPTED",
        "PROCESSING",
        "COMPLETED",
        "REJECTED"
      ],
      "title": "BulkTransactionStateEnum",
      "type": "string"
    },
    "BulkTransfersIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /bulkTransfers/{ID} object",
      "properties": {
        "bulkTransferState": {
          "description": "The state of the bulk transfer.",
          "type": "string"
        },
        "completedTimestamp": {
          "description": "Time and date when the bulk transaction was completed.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "individualTransferResults": {
          "description": "List of IndividualTransferResult elements.",
          "items": {
            "$ref": "#/definitions/IndividualTransferResult"
          },
          "maxItems": 1000,
          "type": "array"
        }
      },
      "required": [
        "bulkTransferState"
      ],
      "title": "BulkTransfersIDPutResponse",
      "type": "object"
    },
    "BulkTransfersPostRequest": {
      "additionalProperties": false,
      "description": "POST /bulkTransfers object",
      "properties": {
        "bulkQuoteId": {
          "description": "ID of the related bulk quote.",
          "type": "string"
        },
        "bulkTransferId": {
          "description": "Common ID between the FSPs and the optional Switch for the bulk transfer object, decided by the Payer FSP. The ID should be reused for resends of the same bulk transfer. A new ID should be generated for each new bulk transfer.",
          "type": "string"
        },
        "expiration": {
          "description": "Expiration time of the transfers.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "individualTransfers": {
          "description": "List of IndividualTransfer elements.",
          "items": {
            "$ref": "#/definitions/IndividualTransfer"
          },
          "maxItems": 1000,
          "minItems": 1,
          "type": "array"
        },
        "payeeFsp": {
          "description": "Payee FSP identifier.",
          "type": "string"
        },
        "payerFsp": {
          "description": "Payer FSP identifier.",
          "type": "string"
        }
      },
      "required": [
        "bulkTransferId",
        "bulkQuoteId",
        "payerFsp",
        "payeeFsp",
        "individualTransfers",
        "expiration"
      ],
      "title": "BulkTransfersPostRequest",
      "type": "object"
    },
    "Code": {
      "description": "Any code/token returned by the Payee FSP (TokenCode Type).",
      "pattern": "^[0-9a-zA-Z]{4,32}$",
      "title": "Code",
      "type": "string"
    },
    "CorrelationId": {
      "description": "Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).",
      "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
      "title": "CorrelationId",
      "type": "string"
    },
    "Currency": {
      "description": "The currency codes defined in ISO 4217 as three-letter alphabetic codes are used as the standard naming representation for currencies.",
      "enum": [
        "AED",
        "AFN",
        "ALL",
        "AMD",
        "ANG",
        "AOA",
        "ARS",
        "AUD",
        "AWG",
        "AZN",
        "BAM",
        "BBD",
        "BDT",
        "BGN",
        "BHD",
        "BIF",
        "BMD",
        "BND",
        "BOB",
        "BRL",
        "BSD",
        "BTN",
        "BWP",
        "BYN",
        "BZD",
        "CAD",
        "CDF",
        "CHF",
        "CLP",
        "CNY",
        "COP",
        "CRC",
        "CUC",
        "CUP",
        "CVE",
        "CZK",
        "DJF",
        "DKK",
        "DOP",
        "DZD",
        "EGP",
        "ERN",
        "ETB",
        "EUR",
        "FJD",
        "FKP",
        "GBP",
        "GEL",
        "GGP",
        "GHS",
        "GIP",
        "GMD",
        "GNF",
        "GTQ",
        "GYD",
        "HKD",
        "HNL",
        "HRK",
        "HTG",
        "HUF",
        "IDR",
        "ILS",
        "IMP",
        "INR",
        "IQD",
        "IRR",
        "ISK",
        "JEP",
        "JMD",
        "JOD",
        "JPY",
        "KES",
        "KGS",
        "KHR",
        "KMF",
        "KPW",
        "KRW",
        "KWD",
        "KYD",
        "KZT",
        "LAK",
        "LBP",
        "LKR",
        "LRD",
        "LSL",
        "LYD",
        "MAD",
        "MDL",
        "MGA",
        "MKD",
        "MMK",
        "MNT",
        "MOP",
        "MRO",
        "MUR",
        "MVR",
        "MWK",
        "MXN",
        "MYR",
        "MZN",
        "NAD",
        "NGN",
        "NIO",
        "NOK",
        "NPR",
        "NZD",
        "OMR",
        "PAB",
        "PEN",
        "PGK",
        "PHP",
        "PKR",
        "PLN",
        "PYG",
        "QAR",
        "RON",
        "RSD",
        "RUB",
        "RWF",
        "SAR",
        "SBD",
        "SCR",
        "SDG",
        "SEK",
        "SGD",
        "SHP",
        "SLL",
        "SOS",
        "SPL",
        "SRD",
        "STD",
        "SVC",
        "SYP",
        "SZL",
        "THB",
        "TJS",
        "TMT",
        "TND",
        "TOP",
        "TRY",
        "TTD",
        "TVD",
        "TWD",
        "TZS",
        "UAH",
        "UGX",
        "USD",
        "UYU",
        "UZS",
        "VEF",
        "VND",
        "VUV",
        "WST",
        "XAF",
        "XCD",
        "XDR",
        "XOF",
        "XPF",
        "YER",
        "ZAR",
        "ZMW",
        "ZWD"
      ],
      "maxLength": 3,
      "minLength": 3,
      "title": "CurrencyEnum",
      "type": "string"
    },
    "Date": {
      "description": "The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. This format, as specified in ISO 8601, contains a date only. A more readable version of the format is yyyy-MM-dd. Examples - \"1982-05-23\", \"1987-08-05”",
      "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$",
      "title": "Date",
      "type": "string"
    },
    "DateOfBirth": {
      "description": "Date of Birth of the Party.",
      "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$",
      "title": "DateofBirth (type Date)",
      "type": "string"
    },
    "DateTime": {
      "description": "The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to ISO 8601, expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples - \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC).",
      "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$",
      "title": "DateTime",
      "type": "string"
    },
    "ErrorCode": {
      "description": "The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represents the specific error.",
      "pattern": "^[1-9]\\d{3}$",
      "title": "ErrorCode",
      "type": "string"
    },
    "ErrorDescription": {
      "description": "Error description string.",
      "maxLength": 128,
      "minLength": 1,
      "title": "ErrorDescription",
      "type": "string"
    },
    "ErrorInformation": {
      "additionalProperties": false,
      "description": "Data model for the complex type ErrorInformation.",
      "properties": {
        "errorCode": {
          "description": "Specific error number.",
          "type": "string"
        },
        "errorDescription": {
          "description": "Error description string.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        }
      },
      "required": [
        "errorCode",
        "errorDescription"
      ],
      "title": "ErrorInformation",
      "type": "object"
    },
    "ErrorInformationObject": {
      "additionalProperties": false,
      "description": "Data model for the complex type object that contains ErrorInformation.",
      "properties": {
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation"
        }
      },
      "required": [
        "errorInformation"
      ],
      "title": "ErrorInformationObject",
      "type": "object"
    },
    "ErrorInformationResponse": {
      "additionalProperties": false,
      "description": "Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.",
      "properties": {
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation"
        }
      },
      "title": "ErrorInformationResponse",
      "type": "object"
    },
    "Extension": {
      "additionalProperties": false,
      "description": "Data model for the complex type Extension",
      "properties": {
        "key": {
          "description": "Extension key.",
          "type": "string"
        },
        "value": {
          "description": "Extension value.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "title": "Extension",
      "type": "object"
    },
    "ExtensionKey": {
      "description": "Extension key.",
      "maxLength": 32,
      "minLength": 1,
      "title": "ExtensionKey",
      "type": "string"
    },
    "ExtensionList": {
      "additionalProperties": false,
      "description": "Data model for the complex type ExtensionList",
      "properties": {
        "extension": {
          "description": "Number of Extension elements",
          "items": {
            "$ref": "#/definitions/Extension"
          },
          "maxItems": 16,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "extension"
      ],
      "title": "ExtensionList",
      "type": "object"
    },
    "ExtensionValue": {
      "description": "Extension value.",
      "maxLength": 128,
      "minLength": 1,
      "title": "ExtensionValue",
      "type": "string"
    },
    "FirstName": {
      "description": "First name of the Party (Name Type).",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
      "title": "FirstName",
      "type": "string"
    },
    "FspId": {
      "description": "FSP identifier.",
      "maxLength": 32,
      "minLength": 1,
      "title": "FspId",
      "type": "string"
    },
    "GeoCode": {
      "additionalProperties": false,
      "description": "Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.",
      "properties": {
        "latitude": {
          "description": "Latitude of the Party.",
          "type": "string"
        },
        "longitude": {
          "description": "Longitude of the   Party.",
          "type": "string"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "title": "GeoCode",
      "type": "object"
    },
    "IlpCondition": {
      "description": "Condition that must be attached to the transfer by the Payer.",
      "maxLength": 48,
      "pattern": "^[A-Za-z0-9-_]{43}$",
      "title": "IlpCondition",
      "type": "string"
    },
    "IlpFulfilment": {
      "description": "Fulfilment that must be attached to the transfer by the Payee.",
      "maxLength": 48,
      "pattern": "^[A-Za-z0-9-_]{43}$",
      "title": "IlpFulfilment",
      "type": "string"
    },
    "IlpPacket": {
      "description": "Information for recipient (transport layer information).",
      "maxLength": 32768,
      "minLength": 1,
      "pattern": "^[A-Za-z0-9-_]+[=]{0,2}$",
      "title": "IlpPacket",
      "type": "string"
    },
    "IndividualQuote": {
      "additionalProperties": false,
      "description": "Data model for the complex type IndividualQuote.",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "amountType": {
          "description": "SEND for sendAmount, RECEIVE for receiveAmount.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "fees": {
          "$ref": "#/definitions/Money"
        },
        "note": {
          "description": "Memo that will be attached to the transaction.",
          "type": "string"
        },
        "payee": {
          "$ref": "#/definitions/Party"
        },
        "quoteId": {
          "description": "Identifies quote message.",
          "type": "string"
        },
        "transactionId": {
          "description": "Identifies transaction message.",
          "type": "string"
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType"
        }
      },
      "required": [
        "quoteId",
        "transactionId",
        "payee",
        "amountType",
        "amount",
        "transactionType"
      ],
      "title": "IndividualQuote",
      "type": "object"
    },
    "IndividualQuoteResult": {
      "additionalProperties": false,
      "description": "Data model for the complex type IndividualQuoteResult.",
      "properties": {
        "condition": {
          "description": "The condition that must be attached to the transfer by the Payer.",
          "type": "string"
        },
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "ilpPacket": {
          "description": "The ILP Packet that must be attached to the transfer by the Payer.",
          "type": "string"
        },
        "payee": {
          "$ref": "#/definitions/Party"
        },
        "payeeFspCommission": {
          "$ref": "#/definitions/Money"
        },
        "payeeFspFee": {
          "$ref": "#/definitions/Money"
        },
        "payeeReceiveAmount": {
          "$ref": "#/definitions/Money"
        },
        "quoteId": {
          "description": "Identifies quote message.",
          "type": "string"
        },
        "transferAmount": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "quoteId"
      ],
      "title": "IndividualQuoteResult",
      "type": "object"
    },
    "IndividualTransfer": {
      "additionalProperties": false,
      "description": "Data model for the complex type IndividualTransfer.",
      "properties": {
        "condition": {
          "description": "Condition that must be fulfilled to commit the transfer.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "ilpPacket": {
          "description": "ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data.",
          "type": "string"
        },
        "transferAmount": {
          "$ref": "#/definitions/Money"
        },
        "transferId": {
          "description": "Identifies messages related to the same /transfers sequence.",
          "type": "string"
        }
      },
      "required": [
        "transferId",
        "transferAmount",
        "ilpPacket",
        "condition"
      ],
      "title": "IndividualTransfer",
      "type": "object"
    },
    "IndividualTransferResult": {
      "additionalProperties": false,
      "description": "Data model for the complex type IndividualTransferResult.",
      "properties": {
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "fulfilment": {
          "description": "Fulfilment of the condition specified with the transaction. Note - Either fulfilment or errorInformation should be set, not both.",
          "type": "string"
        },
        "transferId": {
          "description": "Identifies messages related to the same /transfers sequence.",
          "type": "string"
        }
      },
      "required": [
        "transferId"
      ],
      "title": "IndividualTransferResult",
      "type": "object"
    },
    "Integer": {
      "description": "The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.",
      "pattern": "^[1-9]\\d*$",
      "title": "Integer",
      "type": "string"
    },
    "LastName": {
      "description": "Last name of the Party (Name Type).",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
      "title": "LastName",
      "type": "string"
    },
    "Latitude": {
      "description": "The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.",
      "pattern": "^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$",
      "title": "Latitude",
      "type": "string"
    },
    "Longitude": {
      "description": "The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.",
      "pattern": "^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$",
      "title": "Longitude",
      "type": "string"
    },
    "MerchantClassificationCode": {
      "description": "A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.",
      "pattern": "^[\\d]{1,4}$",
      "title": "MerchantClassificationCode",
      "type": "string"
    },
    "MiddleName": {
      "description": "Middle name of the Party (Name Type).",
      "maxLength": 128,
      "minLength": 1,
      "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
      "title": "MiddleName",
      "type": "string"
    },
    "Money": {
      "additionalProperties": false,
      "description": "Data model for the complex type Money.",
      "properties": {
        "amount": {
          "description": "Amount of Money.",
          "type": "string"
        },
        "currency": {
          "description": "Currency of the amount.",
          "type": "string"
        }
      },
      "required": [
        "currency",
        "amount"
      ],
      "title": "Money",
      "type": "object"
    },
    "Name": {
      "description": "The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name. Regular Expression - The regular expression for restricting the Name type is \"^(?!\\s*$)[\\w .,'-]{1,128}$\". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ). Note -  In some programming languages, Unicode support must be specifically enabled. For example, if Java is used the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.",
      "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
      "title": "Name",
      "type": "string"
    },
    "Note": {
      "description": "Memo assigned to transaction",
      "maxLength": 128,
      "minLength": 1,
      "title": "Note",
      "type": "string"
    },
    "OtpValue": {
      "description": "The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.",
      "pattern": "^\\d{3,10}$",
      "title": "OtpValue",
      "type": "string"
    },
    "ParticipantsIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /participants/{ID} object",
      "properties": {
        "currency": {
          "description": "Indicate that the provided Currency was set to be supported by each successfully added PartyIdInfo.",
          "type": "string"
        },
        "partyList": {
          "description": "List of PartyResult elements that were either created or failed to be created.",
          "items": {
            "$ref": "#/definitions/PartyResult"
          },
          "maxItems": 10000,
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "partyList"
      ],
      "title": "ParticipantsIDPutResponse",
      "type": "object"
    },
    "ParticipantsPostRequest": {
      "additionalProperties": false,
      "description": "POST /participants object",
      "properties": {
        "currency": {
          "description": "Indicate that the provided Currency is supported by each PartyIdInfo in the list.",
          "type": "string"
        },
        "partyList": {
          "description": "List of PartyIdInfo elements that the client would like to update or create FSP information about.",
          "items": {
            "$ref": "#/definitions/PartyIdInfo"
          },
          "maxItems": 10000,
          "minItems": 1,
          "type": "array"
        },
        "requestId": {
          "description": "The ID of the request, decided by the client. Used for identification of the callback from the server.",
          "type": "string"
        }
      },
      "required": [
        "requestId",
        "partyList"
      ],
      "title": "ParticipantsPostRequest",
      "type": "object"
    },
    "ParticipantsTypeIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object",
      "properties": {
        "fspId": {
          "description": "FSP Identifier that the Party belongs to.",
          "type": "string"
        }
      },
      "title": "ParticipantsTypeIDPutResponse",
      "type": "object"
    },
    "ParticipantsTypeIDSubIDPostRequest": {
      "additionalProperties": false,
      "description": "POST /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object",
      "properties": {
        "currency": {
          "description": "Indicate that the provided Currency is supported by the Party.",
          "type": "string"
        },
        "fspId": {
          "description": "FSP Identifier that the Party belongs to.",
          "type": "string"
        }
      },
      "required": [
        "fspId"
      ],
      "title": "ParticipantsTypeIDSubIDPostRequest",
      "type": "object"
    },
    "PartiesTypeIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /parties/{Type}/{ID} object",
      "properties": {
        "party": {
          "$ref": "#/definitions/Party"
        }
      },
      "required": [
        "party"
      ],
      "title": "PartiesTypeIDPutResponse",
      "type": "object"
    },
    "Party": {
      "additionalProperties": false,
      "description": "Data model for the complex type Party.",
      "properties": {
        "merchantClassificationCode": {
          "description": "Used in the context of Payee Information, where the Payee happens to be a merchant accepting merchant payments.",
          "type": "string"
        },
        "name": {
          "description": "Display name of the Party, could be a real name or a nick name.",
          "type": "string"
        },
        "partyIdInfo": {
          "$ref": "#/definitions/PartyIdInfo"
        },
        "personalInfo": {
          "$ref": "#/definitions/PartyPersonalInfo"
        }
      },
      "required": [
        "partyIdInfo"
      ],
      "title": "Party",
      "type": "object"
    },
    "PartyComplexName": {
      "additionalProperties": false,
      "description": "Data model for the complex type PartyComplexName.",
      "properties": {
        "firstName": {
          "$ref": "#/definitions/FirstName"
        },
        "lastName": {
          "$ref": "#/definitions/LastName"
        },
        "middleName": {
          "$ref": "#/definitions/MiddleName"
        }
      },
      "title": "PartyComplexName",
      "type": "object"
    },
    "PartyIdInfo": {
      "additionalProperties": false,
      "description": "Data model for the complex type PartyIdInfo.",
      "properties": {
        "fspId": {
          "description": "FSP ID (if known)",
          "type": "string"
        },
        "partyIdType": {
          "description": "Type of the identifier.",
          "type": "string"
        },
        "partyIdentifier": {
          "description": "An identifier for the Party.",
          "type": "string"
        },
        "partySubIdOrType": {
          "description": "A sub-identifier or sub-type for the Party.",
          "type": "string"
        }
      },
      "required": [
        "partyIdType",
        "partyIdentifier"
      ],
      "title": "PartyIdInfo",
      "type": "object"
    },
    "PartyIdType": {
      "description": "Below are the allowed values for the enumeration - MSISDN An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the ITU-T E.164 standard. Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix. - EMAIL An email is used as reference to a participant. The format of the email should be according to the informational RFC 3696. - PERSONAL_ID A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element. - BUSINESS A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used. - DEVICE A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element. - ACCOUNT_ID A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP. - IBAN A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace. - ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier.",
      "enum": [
        "MSISDN",
        "EMAIL",
        "PERSONAL_ID",
        "BUSINESS",
        "DEVICE",
        "ACCOUNT_ID",
        "IBAN",
        "ALIAS"
      ],
      "title": "PartyIdTypeEnum",
      "type": "string"
    },
    "PartyIdentifier": {
      "description": "Identifier of the Party.",
      "maxLength": 128,
      "minLength": 1,
      "title": "PartyIdentifier",
      "type": "string"
    },
    "PartyName": {
      "description": "Name of the Party. Could be a real name or a nickname.",
      "maxLength": 128,
      "minLength": 1,
      "title": "PartyName",
      "type": "string"
    },
    "PartyPersonalInfo": {
      "additionalProperties": false,
      "description": "Data model for the complex type PartyPersonalInfo.",
      "properties": {
        "complexName": {
          "$ref": "#/definitions/PartyComplexName"
        },
        "dateOfBirth": {
          "description": "Date of birth for the Party.",
          "type": "string"
        }
      },
      "title": "PartyPersonalInfo",
      "type": "object"
    },
    "PartyResult": {
      "additionalProperties": false,
      "description": "Data model for the complex type PartyResult.",
      "properties": {
        "errorInformation": {
          "$ref": "#/definitions/ErrorInformation"
        },
        "partyId": {
          "$ref": "#/definitions/PartyIdInfo"
        }
      },
      "required": [
        "partyId"
      ],
      "title": "PartyResult",
      "type": "object"
    },
    "PartySubIdOrType": {
      "description": "Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.",
      "maxLength": 128,
      "minLength": 1,
      "title": "PartySubIdOrType",
      "type": "string"
    },
    "PersonalIdentifierType": {
      "description": "Below are the allowed values for the enumeration - PASSPORT A passport number is used as reference to a Party. - NATIONAL_REGISTRATION A national registration number is used as reference to a Party. - DRIVING_LICENSE A driving license is used as reference to a Party. - ALIEN_REGISTRATION An alien registration number is used as reference to a Party. - NATIONAL_ID_CARD A national ID card number is used as reference to a Party. - EMPLOYER_ID A tax identification number is used as reference to a Party. - TAX_ID_NUMBER A tax identification number is used as reference to a Party. - SENIOR_CITIZENS_CARD A senior citizens card number is used as reference to a Party. - MARRIAGE_CERTIFICATE A marriage certificate number is used as reference to a Party. - HEALTH_CARD A health card number is used as reference to a Party. - VOTERS_ID A voter’s identification number is used as reference to a Party. - UNITED_NATIONS An UN (United Nations) number is used as reference to a Party. - OTHER_ID Any other type of identification type number is used as reference to a Party.",
      "enum": [
        "PASSPORT",
        "NATIONAL_REGISTRATION",
        "DRIVING_LICENSE",
        "ALIEN_REGISTRATION",
        "NATIONAL_ID_CARD",
        "EMPLOYER_ID",
        "TAX_ID_NUMBER",
        "SENIOR_CITIZENS_CARD",
        "MARRIAGE_CERTIFICATE",
        "HEALTH_CARD",
        "VOTERS_ID",
        "UNITED_NATIONS",
        "OTHER_ID"
      ],
      "title": "PersonalIdentifierType",
      "type": "string"
    },
    "QRCODE": {
      "description": "QR code used as One Time Password.",
      "maxLength": 64,
      "minLength": 1,
      "title": "QRCODE",
      "type": "string"
    },
    "QuotesIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /quotes/{ID} object",
      "properties": {
        "condition": {
          "description": "The condition that must be attached to the transfer by the Payer.",
          "type": "string"
        },
        "expiration": {
          "description": "Date and time until when the quotation is valid and can be honored when used in the subsequent transaction.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode"
        },
        "ilpPacket": {
          "description": "The ILP Packet that must be attached to the transfer by the Payer.",
          "type": "string"
        },
        "payeeFspCommission": {
          "$ref": "#/definitions/Money"
        },
        "payeeFspFee": {
          "$ref": "#/definitions/Money"
        },
        "payeeReceiveAmount": {
          "$ref": "#/definitions/Money"
        },
        "transferAmount": {
          "$ref": "#/definitions/Money"
        }
      },
      "required": [
        "transferAmount",
        "expiration",
        "ilpPacket",
        "condition"
      ],
      "title": "QuotesIDPutResponse",
      "type": "object"
    },
    "QuotesPostRequest": {
      "additionalProperties": false,
      "description": "POST /quotes object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "amountType": {
          "description": "SEND for send amount, RECEIVE for receive amount.",
          "type": "string"
        },
        "expiration": {
          "description": "Expiration is optional. It can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, and Merchant to know that their request has a time limit.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "fees": {
          "$ref": "#/definitions/Money"
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode"
        },
        "note": {
          "description": "A memo that will be attached to the transaction.",
          "type": "string"
        },
        "payee": {
          "$ref": "#/definitions/Party"
        },
        "payer": {
          "$ref": "#/definitions/Party"
        },
        "quoteId": {
          "description": "Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.",
          "type": "string"
        },
        "transactionId": {
          "description": "Common ID (decided by the Payer FSP) between the FSPs for the future transaction object. The actual transaction will be created as part of a successful transfer process. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.",
          "type": "string"
        },
        "transactionRequestId": {
          "description": "Identifies an optional previously-sent transaction request.",
          "type": "string"
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType"
        }
      },
      "required": [
        "quoteId",
        "transactionId",
        "payee",
        "payer",
        "amountType",
        "amount",
        "transactionType"
      ],
      "title": "QuotesPostRequest",
      "type": "object"
    },
    "Refund": {
      "additionalProperties": false,
      "description": "Data model for the complex type Refund.",
      "properties": {
        "originalTransactionId": {
          "description": "Reference to the original transaction ID that is requested to be refunded.",
          "type": "string"
        },
        "refundReason": {
          "description": "Free text indicating the reason for the refund.",
          "type": "string"
        }
      },
      "required": [
        "originalTransactionId"
      ],
      "title": "Refund",
      "type": "object"
    },
    "RefundReason": {
      "description": "Reason for the refund.",
      "maxLength": 128,
      "minLength": 1,
      "title": "RefundReason",
      "type": "string"
    },
    "Status": {
      "additionalProperties": false,
      "description": "Data model for the api status.",
      "properties": {
        "services": {
          "description": "An list of the statuses of services that the API requires",
          "items": {},
          "type": "array"
        },
        "startTime": {
          "description": "The UTC time that the server started up",
          "type": "string"
        },
        "status": {
          "description": "The return status, usually \"OK\"",
          "type": "string"
        },
        "uptime": {
          "description": "The amount of time in seconds that the server has been up for.",
          "type": "number"
        },
        "versionNumber": {
          "description": "Current version of the API",
          "type": "string"
        }
      },
      "title": "Status",
      "type": "object"
    },
    "TokenCode": {
      "description": "The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits or upper or lowercase characters from a to z.",
      "pattern": "^[0-9a-zA-Z]{4,32}$",
      "title": "TokenCode",
      "type": "string"
    },
    "Transaction": {
      "additionalProperties": false,
      "description": "Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes.",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "note": {
          "description": "Memo associated to the transaction, intended to the Payee.",
          "type": "string"
        },
        "payee": {
          "$ref": "#/definitions/Party"
        },
        "payer": {
          "$ref": "#/definitions/Party"
        },
        "quoteId": {
          "description": "ID of the quote, the ID is decided by the Payer FSP during the creation of the quote.",
          "type": "string"
        },
        "transactionId": {
          "description": "ID of the transaction, the ID is decided by the Payer FSP during the creation of the quote.",
          "type": "string"
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType"
        }
      },
      "required": [
        "transactionId",
        "quoteId",
        "payee",
        "payer",
        "amount",
        "transactionType"
      ],
      "title": "Transaction",
      "type": "object"
    },
    "TransactionInitiator": {
      "description": "Below are the allowed values for the enumeration - PAYER Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way. - PAYEE Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.",
      "enum": [
        "PAYER",
        "PAYEE"
      ],
      "title": "TransactionInitiatorEnum",
      "type": "string"
    },
    "TransactionInitiatorType": {
      "description": "Below are the allowed values for the enumeration - CONSUMER Consumer is the initiator of the transaction. - AGENT Agent is the initiator of the transaction. - BUSINESS Business is the initiator of the transaction. - DEVICE Device is the initiator of the transaction.",
      "enum": [
        "CONSUMER",
        "AGENT",
        "BUSINESS",
        "DEVICE"
      ],
      "title": "TransactionInitiatorTypeEnum",
      "type": "string"
    },
    "TransactionRequestState": {
      "description": "Below are the allowed values for the enumeration - RECEIVED Payer FSP has received the transaction from the Payee FSP. - PENDING Payer FSP has sent the transaction request to the Payer. - ACCEPTED Payer has approved the transaction. - REJECTED Payer has rejected the transaction.",
      "enum": [
        "RECEIVED",
        "PENDING",
        "ACCEPTED",
        "REJECTED"
      ],
      "title": "TransactionRequestStateEnum",
      "type": "string"
    },
    "TransactionRequestsIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /transactionRequests/{ID} object",
      "properties": {
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "transactionId": {
          "description": "Identifies a related transaction (if a transaction has been created).",
          "type": "string"
        },
        "transactionRequestState": {
          "description": "State of the transaction request.",
          "type": "string"
        }
      },
      "required": [
        "transactionRequestState"
      ],
      "title": "TransactionRequestsIDPutResponse",
      "type": "object"
    },
    "TransactionRequestsPostRequest": {
      "additionalProperties": false,
      "description": "POST /transactionRequests object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "authenticationType": {
          "description": "OTP or QR Code, otherwise empty.",
          "type": "string"
        },
        "expiration": {
          "description": "Can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, Merchant to know that their request has a time limit.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "geoCode": {
          "$ref": "#/definitions/GeoCode"
        },
        "note": {
          "description": "Reason for the transaction request, intended to the Payer.",
          "type": "string"
        },
        "payee": {
          "$ref": "#/definitions/Party"
        },
        "payer": {
          "$ref": "#/definitions/PartyIdInfo"
        },
        "transactionRequestId": {
          "description": "Common ID between the FSPs for the transaction request object, decided by the Payee FSP. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.",
          "type": "string"
        },
        "transactionType": {
          "$ref": "#/definitions/TransactionType"
        }
      },
      "required": [
        "transactionRequestId",
        "payee",
        "payer",
        "amount",
        "transactionType"
      ],
      "title": "TransactionRequestsPostRequest",
      "type": "object"
    },
    "TransactionScenario": {
      "description": "Below are the allowed values for the enumeration - DEPOSIT Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User. - WITHDRAWAL Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer. - TRANSFER Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction. - PAYMENT Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on. - REFUND Used for performing a refund of transaction.",
      "enum": [
        "DEPOSIT",
        "WITHDRAWAL",
        "TRANSFER",
        "PAYMENT",
        "REFUND"
      ],
      "title": "TransactionScenarioEnum",
      "type": "string"
    },
    "TransactionState": {
      "description": "Below are the allowed values for the enumeration - RECEIVED Payee FSP has received the transaction from the Payer FSP. - PENDING Payee FSP has validated the transaction. - COMPLETED Payee FSP has successfully performed the transaction. - REJECTED Payee FSP has failed to perform the transaction.",
      "enum": [
        "RECEIVED",
        "PENDING",
        "COMPLETED",
        "REJECTED"
      ],
      "title": "TransactionStateEnum",
      "type": "string"
    },
    "TransactionSubScenario": {
      "description": "Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).",
      "pattern": "^[A-Z_]{1,32}$",
      "title": "TransactionSubScenario",
      "type": "string"
    },
    "TransactionType": {
      "additionalProperties": false,
      "description": "Data model for the complex type TransactionType.",
      "properties": {
        "balanceOfPayments": {
          "description": "Balance of Payments code.",
          "type": "string"
        },
        "initiator": {
          "description": "Who is initiating the transaction - Payer or Payee",
          "type": "string"
        },
        "initiatorType": {
          "description": "Consumer, agent, business, …",
          "type": "string"
        },
        "refundInfo": {
          "$ref": "#/definitions/Refund"
        },
        "scenario": {
          "description": "Deposit, withdrawal, refund, …",
          "type": "string"
        },
        "subScenario": {
          "description": "Possible sub-scenario, defined locally within the scheme.",
          "type": "string"
        }
      },
      "required": [
        "scenario",
        "initiator",
        "initiatorType"
      ],
      "title": "TransactionType",
      "type": "object"
    },
    "TransactionsIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /transactions/{ID} object",
      "properties": {
        "code": {
          "description": "Optional redemption information provided to Payer after transaction has been completed.",
          "type": "string"
        },
        "completedTimestamp": {
          "description": "Time and date when the transaction was completed.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "transactionState": {
          "description": "State of the transaction.",
          "type": "string"
        }
      },
      "required": [
        "transactionState"
      ],
      "title": "TransactionsIDPutResponse",
      "type": "object"
    },
    "TransferState": {
      "description": "Below are the allowed values for the enumeration - RECEIVED Next ledger has received the transfer. - RESERVED Next ledger has reserved the transfer. - COMMITTED Next ledger has successfully performed the transfer. - ABORTED Next ledger has aborted the transfer due a rejection or failure to perform the transfer.",
      "enum": [
        "RECEIVED",
        "RESERVED",
        "COMMITTED",
        "ABORTED"
      ],
      "title": "TransferStateEnum",
      "type": "string"
    },
    "TransfersIDPutResponse": {
      "additionalProperties": false,
      "description": "PUT /transfers/{ID} object",
      "properties": {
        "completedTimestamp": {
          "description": "Time and date when the transaction was completed.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "fulfilment": {
          "description": "Fulfilment of the condition specified with the transaction. Mandatory if transfer has completed successfully.",
          "type": "string"
        },
        "transferState": {
          "description": "State of the transfer.",
          "type": "string"
        }
      },
      "required": [
        "transferState"
      ],
      "title": "TransfersIDPutResponse",
      "type": "object"
    },
    "TransfersPostRequest": {
      "additionalProperties": false,
      "description": "POST /transfers Request object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Money"
        },
        "condition": {
          "description": "The condition that must be fulfilled to commit the transfer.",
          "type": "string"
        },
        "expiration": {
          "description": "Expiration can be set to get a quick failure expiration of the transfer. The transfer should be rolled back if no fulfilment is delivered before this time.",
          "type": "string"
        },
        "extensionList": {
          "$ref": "#/definitions/ExtensionList"
        },
        "ilpPacket": {
          "description": "The ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data.",
          "type": "string"
        },
        "payeeFsp": {
          "description": "Payee FSP in the proposed financial transaction.",
          "type": "string"
        },
        "payerFsp": {
          "description": "Payer FSP in the proposed financial transaction.",
          "type": "string"
        },
        "transferId": {
          "description": "The common ID between the FSPs and the optional Switch for the transfer object, decided by the Payer FSP. The ID should be reused for resends of the same transfer. A new ID should be generated for each new transfer.",
          "type": "string"
        }
      },
      "required": [
        "transferId",
        "payeeFsp",
        "payerFsp",
        "amount",
        "ilpPacket",
        "condition",
        "expiration"
      ],
      "title": "TransfersPostRequest",
      "type": "object"
    },
    "UndefinedEnum": {
      "description": "The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters including an underscore character (_).",
      "pattern": "^[A-Z_]{1,32}$",
      "title": "UndefinedEnum",
      "type": "string"
    }
  },
  "x-components": {
    "parameters": {
      "Accept": {
        "description": "The Accept header field indicates the version of the API the client would like the server to use.",
        "in": "header",
        "name": "accept",
        "required": true,
        "type": "string"
      },
      "Content-Length": {
        "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body. Note - The API supports a maximum size of 5242880 bytes (5 Megabytes)",
        "in": "header",
        "name": "content-length",
        "required": false,
        "type": "number"
      },
      "Content-Type": {
        "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
        "in": "header",
        "name": "content-type",
        "required": true,
        "type": "string"
      },
      "Date": {
        "description": "The Date header field indicates the date when the request was sent.",
        "in": "header",
        "name": "date",
        "required": true,
        "type": "string"
      },
      "FSPIOP-Destination": {
        "description": "The FSPIOP-Destination header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes.",
        "in": "header",
        "name": "fspiop-destination",
        "required": false,
        "type": "string"
      },
      "FSPIOP-Encryption": {
        "description": "The FSPIOP-Encryption header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.",
        "in": "header",
        "name": "fspiop-encryption",
        "required": false,
        "type": "string"
      },
      "FSPIOP-HTTP-Method": {
        "description": "The FSPIOP-HTTP-Method header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information see API Signature document.",
        "in": "header",
        "name": "fspiop-http-method",
        "required": false,
        "type": "string"
      },
      "FSPIOP-Signature": {
        "description": "The FSPIOP-Signature header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.",
        "in": "header",
        "name": "fspiop-signature",
        "required": false,
        "type": "string"
      },
      "FSPIOP-Source": {
        "description": "The FSPIOP-Source header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field FSPIOP-Signature).",
        "in": "header",
        "name": "fspiop-source",
        "required": true,
        "type": "string"
      },
      "FSPIOP-URI": {
        "description": "The FSPIOP-URI header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information see API Signature document.",
        "in": "header",
        "name": "fspiop-uri",
        "required": false,
        "type": "string"
      },
      "ID": {
        "in": "path",
        "name": "ID",
        "required": true,
        "type": "string"
      },
      "SubId": {
        "in": "path",
        "name": "SubId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Type": {
        "in": "path",
        "name": "Type",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "X-Forwarded-For": {
        "description": "The X-Forwarded-For header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple X-Forwarded-For values as in the example shown here should be expected and supported by implementers of the API. Note - An alternative to X-Forwarded-For is defined in RFC 7239. However, to this point RFC 7239 is less-used and supported than X-Forwarded-For.",
        "in": "header",
        "name": "x-forwarded-for",
        "required": false,
        "type": "string"
      }
    },
    "responses": {
      "ErrorResponse400": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Bad Request - The application cannot process the request; for example, due to malformed syntax or the payload exceeded size restrictions.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse401": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Unauthorized - The request requires authentication in order to be processed.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse403": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Forbidden - The request was denied and will be denied in the future.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse404": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Not Found - The resource specified in the URI was not found.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse405": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Method Not Allowed - An unsupported HTTP method for the request was used.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse406": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Not acceptable - The server is not capable of generating content according to the Accept headers sent in the request. Used in the API to indicate that the server does not support the version that the client is requesting.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse501": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Not Implemented - The server does not support the requested service. The client should not retry.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ErrorResponse503": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationResponse"
            }
          }
        },
        "description": "Service Unavailable - The server is currently unavailable to accept any new service requests. This should be a temporary state, and the client should retry within a reasonable time frame.",
        "headers": {
          "Content-Length": {
            "description": "The Content-Length header field indicates the anticipated size of the payload body. Only sent if there is a body.",
            "schema": {
              "type": "integer"
            }
          },
          "Content-Type": {
            "description": "The Content-Type header indicates the specific version of the API used to send the payload body.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Response200": {
        "description": "OK"
      },
      "Response202": {
        "description": "Accepted"
      },
      "ResponseHealth200": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "description": "OK"
      }
    },
    "requestBodies": {
      "ErrorInformationObject": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/ErrorInformationObject"
            }
          }
        },
        "required": true
      }
    }
  }
}
